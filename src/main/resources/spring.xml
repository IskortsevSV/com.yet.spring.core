<?xml version="1.0" encoding="UTF-8"?>
<!--добавляем util namespace <util: ...
добавляем аннотации context:annotation-config
@Autowired заменяет реализацию bean (required=false) - выдает null
@Qualifier("bean name")
@Resource(name="...")
@Component
<context:component-scan base-package=".."/> для поиска все @Component
@Service
@Repository
@Controller
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.2.xsd">


    <import resource="loggers.xml"/>
    <import resource="aspects.xml"/>

    <util:properties id="clientProps"
    location="classpath:client.properties"/>

    <!-- утилитарный бин-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">

        <property name="locations">
            <list>
                <value>classpath:client.properties</value>
            </list>
        </property>

        <property name="ignoreResourceNotFound" value="true"/>
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />

    </bean>

    <!--  в метод класса client setGreeting(Str ms) устанавливаем value "Hello there!"-->
    <!--с помощью util namespace добавляем в бин p:greeting  -->
    <bean id="client" class="com.yet.spring.core.beans.Client"
          p:greeting="${greeting}">

        <constructor-arg index="0" value="${id}"/>
        <constructor-arg value="${name}"/>

        <!--  <constructor-arg type="java.lang.String" value="J. Smith"/>-->
        <!--<property name="greeting" value="${greeting}"/>-->
    </bean>

    <!--создаем отдельный контейнер id loggerMap с помощью util namespace с помощью map-class можно указать нужную коллекцию -->
    <util:map id="loggerMap" map-class="java.util.TreeMap">
        <entry key="INFO" value-ref="consoleEventLogger"/>
        <entry key="ERROR" value-ref="combinedEventLogger"/>
    </util:map>

    <!--добавляем id loggerMap в конструктор-->
    <bean id="app" class="com.yet.spring.core.App">
        <constructor-arg ref="client"/>

     <!--   <constructor-arg ref="consoleEventLogger"/>-->
        <!--
        если добавить после "...Event)?.isDay..." - ? то он проверит значение на null , и если оно null его и установит
        T - означает type
        -->
        <constructor-arg value="#{T(com.yet.spring.core.beans.Event).isDay(8,17) ?
         cacheFileEventLogger : combinedEventLogger }"/>

        <constructor-arg ref="loggerMap"/>

        <property name="startupMessage" value="#{'Hello user ' +
            ( systemProperties['os.name'].equals('Windows') ?
                systemEnvironment['USERNAME'] : systemEnvironment['USER'] ) +
                 '. Default logger is ' + app.defaultLogger.name}"/>

        <property name="statisticsAspect" ref="statisticsAspect"/>
    </bean>

    <!--внутренний бин в конструкторе, если каждый раз нужен новый объект scope=prototype-->
    <bean id="event" class="com.yet.spring.core.beans.Event" scope="prototype">
        <constructor-arg name="date" value="#{new java.util.Date()}"/>
        <constructor-arg name="dateFormat" value="#{T(java.text.DateFormat).getDateTimeInstance()}"/>

        <!--<constructor-arg>
            <bean class="java.util.Date"/>
        </constructor-arg>
        <constructor-arg ref="dateFormat"/>-->


    </bean>

    <!-- используем factory-method для abstract класса у которого нет конструктора -->
    <bean id="dateFormat" class="java.text.DateFormat"
          factory-method="getDateTimeInstance"/>

    <bean id="monitor" class="com.yet.spring.core.util.Monitor"/>
    <bean id="awared" class="com.yet.spring.core.util.AwareBean" init-method="init"/>

</beans>